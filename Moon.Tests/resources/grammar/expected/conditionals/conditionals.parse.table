(ADDOP, +): ADDOP -> +
(ADDOP, -): ADDOP -> -
(ADDOP, or): ADDOP -> or
(APARAMS, (): APARAMS -> EXPR APARAMS1
(APARAMS, )): APARAMS -> eps
(APARAMS, +): APARAMS -> EXPR APARAMS1
(APARAMS, -): APARAMS -> EXPR APARAMS1
(APARAMS, floatliteral): APARAMS -> EXPR APARAMS1
(APARAMS, id): APARAMS -> EXPR APARAMS1
(APARAMS, integerliteral): APARAMS -> EXPR APARAMS1
(APARAMS, not): APARAMS -> EXPR APARAMS1
(APARAMS1, )): APARAMS1 -> eps
(APARAMS1, ,): APARAMS1 -> APARAMSTAIL APARAMS1
(APARAMSTAIL, ,): APARAMSTAIL -> , EXPR
(ARITHEXPR, (): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR, +): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR, -): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR, floatliteral): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR, id): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR, integerliteral): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR, not): ARITHEXPR -> TERM ARITHEXPR1
(ARITHEXPR1, )): ARITHEXPR1 -> eps
(ARITHEXPR1, +): ARITHEXPR1 -> ADDOP TERM ARITHEXPR1
(ARITHEXPR1, ,): ARITHEXPR1 -> eps
(ARITHEXPR1, -): ARITHEXPR1 -> ADDOP TERM ARITHEXPR1
(ARITHEXPR1, ;): ARITHEXPR1 -> eps
(ARITHEXPR1, <): ARITHEXPR1 -> eps
(ARITHEXPR1, <=): ARITHEXPR1 -> eps
(ARITHEXPR1, <>): ARITHEXPR1 -> eps
(ARITHEXPR1, ==): ARITHEXPR1 -> eps
(ARITHEXPR1, >): ARITHEXPR1 -> eps
(ARITHEXPR1, >=): ARITHEXPR1 -> eps
(ARITHEXPR1, ]): ARITHEXPR1 -> eps
(ARITHEXPR1, or): ARITHEXPR1 -> ADDOP TERM ARITHEXPR1
(ARRAYSIZE, [): ARRAYSIZE -> [ MAYBEINTNUM ]
(ASSIGNOP, =): ASSIGNOP -> =
(ASSIGNSTAT, =): ASSIGNSTAT -> ASSIGNOP EXPR
(CLASSDECL, class): CLASSDECL -> class id CLASSDECL1 { CLASSDECL2 } ;
(CLASSDECL1, inherits): CLASSDECL1 -> inherits id CLASSDECL3
(CLASSDECL1, {): CLASSDECL1 -> eps
(CLASSDECL2, private): CLASSDECL2 -> VISIBILITY MEMBERDECL CLASSDECL2
(CLASSDECL2, public): CLASSDECL2 -> VISIBILITY MEMBERDECL CLASSDECL2
(CLASSDECL2, }): CLASSDECL2 -> eps
(CLASSDECL3, ,): CLASSDECL3 -> , id CLASSDECL3
(CLASSDECL3, {): CLASSDECL3 -> eps
(EXPR, (): EXPR -> ARITHEXPR EXPR1
(EXPR, +): EXPR -> ARITHEXPR EXPR1
(EXPR, -): EXPR -> ARITHEXPR EXPR1
(EXPR, floatliteral): EXPR -> ARITHEXPR EXPR1
(EXPR, id): EXPR -> ARITHEXPR EXPR1
(EXPR, integerliteral): EXPR -> ARITHEXPR EXPR1
(EXPR, not): EXPR -> ARITHEXPR EXPR1
(EXPR1, )): EXPR1 -> eps
(EXPR1, ,): EXPR1 -> eps
(EXPR1, ;): EXPR1 -> eps
(EXPR1, <): EXPR1 -> RELOP ARITHEXPR
(EXPR1, <=): EXPR1 -> RELOP ARITHEXPR
(EXPR1, <>): EXPR1 -> RELOP ARITHEXPR
(EXPR1, ==): EXPR1 -> RELOP ARITHEXPR
(EXPR1, >): EXPR1 -> RELOP ARITHEXPR
(EXPR1, >=): EXPR1 -> RELOP ARITHEXPR
(FACTOR, (): FACTOR -> ( ARITHEXPR )
(FACTOR, +): FACTOR -> SIGN FACTOR
(FACTOR, -): FACTOR -> SIGN FACTOR
(FACTOR, floatliteral): FACTOR -> floatliteral
(FACTOR, id): FACTOR -> id FACTOR1
(FACTOR, integerliteral): FACTOR -> integerliteral
(FACTOR, not): FACTOR -> not FACTOR
(FACTOR1, (): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, )): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, *): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, +): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, ,): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, -): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, .): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, /): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, ;): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, <): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, <=): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, <>): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, ==): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, >): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, >=): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, [): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, ]): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, and): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR1, or): FACTOR1 -> IDNEST1 FACTOR2
(FACTOR2, )): FACTOR2 -> eps
(FACTOR2, *): FACTOR2 -> eps
(FACTOR2, +): FACTOR2 -> eps
(FACTOR2, ,): FACTOR2 -> eps
(FACTOR2, -): FACTOR2 -> eps
(FACTOR2, .): FACTOR2 -> . FACTOR3
(FACTOR2, /): FACTOR2 -> eps
(FACTOR2, ;): FACTOR2 -> eps
(FACTOR2, <): FACTOR2 -> eps
(FACTOR2, <=): FACTOR2 -> eps
(FACTOR2, <>): FACTOR2 -> eps
(FACTOR2, ==): FACTOR2 -> eps
(FACTOR2, >): FACTOR2 -> eps
(FACTOR2, >=): FACTOR2 -> eps
(FACTOR2, ]): FACTOR2 -> eps
(FACTOR2, and): FACTOR2 -> eps
(FACTOR2, or): FACTOR2 -> eps
(FACTOR3, )): FACTOR3 -> eps
(FACTOR3, *): FACTOR3 -> eps
(FACTOR3, +): FACTOR3 -> eps
(FACTOR3, ,): FACTOR3 -> eps
(FACTOR3, -): FACTOR3 -> eps
(FACTOR3, /): FACTOR3 -> eps
(FACTOR3, ;): FACTOR3 -> eps
(FACTOR3, <): FACTOR3 -> eps
(FACTOR3, <=): FACTOR3 -> eps
(FACTOR3, <>): FACTOR3 -> eps
(FACTOR3, ==): FACTOR3 -> eps
(FACTOR3, >): FACTOR3 -> eps
(FACTOR3, >=): FACTOR3 -> eps
(FACTOR3, ]): FACTOR3 -> eps
(FACTOR3, and): FACTOR3 -> eps
(FACTOR3, id): FACTOR3 -> id FACTOR4
(FACTOR3, or): FACTOR3 -> eps
(FACTOR4, (): FACTOR4 -> IDNEST3 FACTOR5
(FACTOR4, .): FACTOR4 -> IDNEST2 . VAR3
(FACTOR4, [): FACTOR4 -> IDNEST2 . VAR3
(FACTOR5, )): FACTOR5 -> eps
(FACTOR5, *): FACTOR5 -> eps
(FACTOR5, +): FACTOR5 -> eps
(FACTOR5, ,): FACTOR5 -> eps
(FACTOR5, -): FACTOR5 -> eps
(FACTOR5, .): FACTOR5 -> . VAR3
(FACTOR5, /): FACTOR5 -> eps
(FACTOR5, ;): FACTOR5 -> eps
(FACTOR5, <): FACTOR5 -> eps
(FACTOR5, <=): FACTOR5 -> eps
(FACTOR5, <>): FACTOR5 -> eps
(FACTOR5, ==): FACTOR5 -> eps
(FACTOR5, >): FACTOR5 -> eps
(FACTOR5, >=): FACTOR5 -> eps
(FACTOR5, ]): FACTOR5 -> eps
(FACTOR5, and): FACTOR5 -> eps
(FACTOR5, or): FACTOR5 -> eps
(FPARAMS, )): FPARAMS -> eps
(FPARAMS, float): FPARAMS -> TYPE id FPARAMS1 FPARAMS2
(FPARAMS, id): FPARAMS -> TYPE id FPARAMS1 FPARAMS2
(FPARAMS, integer): FPARAMS -> TYPE id FPARAMS1 FPARAMS2
(FPARAMS1, )): FPARAMS1 -> eps
(FPARAMS1, ,): FPARAMS1 -> eps
(FPARAMS1, [): FPARAMS1 -> ARRAYSIZE FPARAMS1
(FPARAMS2, )): FPARAMS2 -> eps
(FPARAMS2, ,): FPARAMS2 -> FPARAMSTAIL FPARAMS2
(FPARAMSTAIL, ,): FPARAMSTAIL -> , TYPE id FPARAMSTAIL1
(FPARAMSTAIL1, )): FPARAMSTAIL1 -> eps
(FPARAMSTAIL1, ,): FPARAMSTAIL1 -> eps
(FPARAMSTAIL1, [): FPARAMSTAIL1 -> ARRAYSIZE FPARAMSTAIL1
(FUNCBODY, do): FUNCBODY -> FUNCBODY1 do FUNCBODY2 end
(FUNCBODY, local): FUNCBODY -> FUNCBODY1 do FUNCBODY2 end
(FUNCBODY1, do): FUNCBODY1 -> eps
(FUNCBODY1, local): FUNCBODY1 -> local FUNCBODY3
(FUNCBODY2, end): FUNCBODY2 -> eps
(FUNCBODY2, id): FUNCBODY2 -> STAT FUNCBODY2
(FUNCBODY2, if): FUNCBODY2 -> STAT FUNCBODY2
(FUNCBODY2, read): FUNCBODY2 -> STAT FUNCBODY2
(FUNCBODY2, return): FUNCBODY2 -> STAT FUNCBODY2
(FUNCBODY2, while): FUNCBODY2 -> STAT FUNCBODY2
(FUNCBODY2, write): FUNCBODY2 -> STAT FUNCBODY2
(FUNCBODY3, do): FUNCBODY3 -> eps
(FUNCBODY3, float): FUNCBODY3 -> VARDECL FUNCBODY3
(FUNCBODY3, id): FUNCBODY3 -> VARDECL FUNCBODY3
(FUNCBODY3, integer): FUNCBODY3 -> VARDECL FUNCBODY3
(FUNCDECLIDLESS, (): FUNCDECLIDLESS -> ( FPARAMS ) : TYPEORVOID ;
(FUNCDEF, id): FUNCDEF -> FUNCHEAD FUNCBODY ;
(FUNCHEAD, id): FUNCHEAD -> id FUNCHEAD1 ( FPARAMS ) : TYPEORVOID
(FUNCHEAD1, (): FUNCHEAD1 -> eps
(FUNCHEAD1, ::): FUNCHEAD1 -> :: id
(IDNEST, id): IDNEST -> id IDNEST1 .
(IDNEST1, (): IDNEST1 -> IDNEST3
(IDNEST1, )): IDNEST1 -> IDNEST2
(IDNEST1, *): IDNEST1 -> IDNEST2
(IDNEST1, +): IDNEST1 -> IDNEST2
(IDNEST1, ,): IDNEST1 -> IDNEST2
(IDNEST1, -): IDNEST1 -> IDNEST2
(IDNEST1, .): IDNEST1 -> IDNEST2
(IDNEST1, /): IDNEST1 -> IDNEST2
(IDNEST1, ;): IDNEST1 -> IDNEST2
(IDNEST1, <): IDNEST1 -> IDNEST2
(IDNEST1, <=): IDNEST1 -> IDNEST2
(IDNEST1, <>): IDNEST1 -> IDNEST2
(IDNEST1, =): IDNEST1 -> IDNEST2
(IDNEST1, ==): IDNEST1 -> IDNEST2
(IDNEST1, >): IDNEST1 -> IDNEST2
(IDNEST1, >=): IDNEST1 -> IDNEST2
(IDNEST1, [): IDNEST1 -> IDNEST2
(IDNEST1, ]): IDNEST1 -> IDNEST2
(IDNEST1, and): IDNEST1 -> IDNEST2
(IDNEST1, or): IDNEST1 -> IDNEST2
(IDNEST2, )): IDNEST2 -> eps
(IDNEST2, *): IDNEST2 -> eps
(IDNEST2, +): IDNEST2 -> eps
(IDNEST2, ,): IDNEST2 -> eps
(IDNEST2, -): IDNEST2 -> eps
(IDNEST2, .): IDNEST2 -> eps
(IDNEST2, /): IDNEST2 -> eps
(IDNEST2, ;): IDNEST2 -> eps
(IDNEST2, <): IDNEST2 -> eps
(IDNEST2, <=): IDNEST2 -> eps
(IDNEST2, <>): IDNEST2 -> eps
(IDNEST2, =): IDNEST2 -> eps
(IDNEST2, ==): IDNEST2 -> eps
(IDNEST2, >): IDNEST2 -> eps
(IDNEST2, >=): IDNEST2 -> eps
(IDNEST2, [): IDNEST2 -> INDEX IDNEST2
(IDNEST2, ]): IDNEST2 -> eps
(IDNEST2, and): IDNEST2 -> eps
(IDNEST2, or): IDNEST2 -> eps
(IDNEST3, (): IDNEST3 -> ( APARAMS )
(INDEX, [): INDEX -> [ ARITHEXPR ]
(INTEGERORFLOAT, float): INTEGERORFLOAT -> float
(INTEGERORFLOAT, integer): INTEGERORFLOAT -> integer
(MAYBEINTNUM, ]): MAYBEINTNUM -> eps
(MAYBEINTNUM, integerliteral): MAYBEINTNUM -> integerliteral
(MEMBERDECL, float): MEMBERDECL -> INTEGERORFLOAT VARDECL2
(MEMBERDECL, id): MEMBERDECL -> id MEMBERDECL1
(MEMBERDECL, integer): MEMBERDECL -> INTEGERORFLOAT VARDECL2
(MEMBERDECL1, (): MEMBERDECL1 -> FUNCDECLIDLESS
(MEMBERDECL1, id): MEMBERDECL1 -> VARDECL1
(MULTOP, *): MULTOP -> *
(MULTOP, /): MULTOP -> /
(MULTOP, and): MULTOP -> and
(PROG, class): PROG -> PROG1 PROG2 main FUNCBODY
(PROG, id): PROG -> PROG1 PROG2 main FUNCBODY
(PROG, main): PROG -> PROG1 PROG2 main FUNCBODY
(PROG1, class): PROG1 -> CLASSDECL PROG1
(PROG1, id): PROG1 -> eps
(PROG1, main): PROG1 -> eps
(PROG2, id): PROG2 -> FUNCDEF PROG2
(PROG2, main): PROG2 -> eps
(RELEXPR, (): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELEXPR, +): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELEXPR, -): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELEXPR, floatliteral): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELEXPR, id): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELEXPR, integerliteral): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELEXPR, not): RELEXPR -> ARITHEXPR RELOP ARITHEXPR
(RELOP, <): RELOP -> <
(RELOP, <=): RELOP -> <=
(RELOP, <>): RELOP -> <>
(RELOP, ==): RELOP -> ==
(RELOP, >): RELOP -> >
(RELOP, >=): RELOP -> >=
(SIGN, +): SIGN -> +
(SIGN, -): SIGN -> -
(START, class): START -> PROG
(START, id): START -> PROG
(START, main): START -> PROG
(STAT, id): STAT -> id STAT1
(STAT, if): STAT -> if ( RELEXPR ) then STATBLOCK else STATBLOCK ;
(STAT, read): STAT -> read ( VAR ) ;
(STAT, return): STAT -> return ( EXPR ) ;
(STAT, while): STAT -> while ( RELEXPR ) STATBLOCK ;
(STAT, write): STAT -> write ( EXPR ) ;
(STAT1, (): STAT1 -> IDNEST1 STAT6
(STAT1, .): STAT1 -> IDNEST1 STAT6
(STAT1, ;): STAT1 -> IDNEST1 STAT6
(STAT1, =): STAT1 -> IDNEST1 STAT6
(STAT1, [): STAT1 -> IDNEST1 STAT6
(STAT2, .): STAT2 -> . STAT3
(STAT2, ;): STAT2 -> ;
(STAT3, =): STAT3 -> VAR2 ASSIGNSTAT ;
(STAT3, [): STAT3 -> VAR2 ASSIGNSTAT ;
(STAT3, id): STAT3 -> id STAT4
(STAT4, (): STAT4 -> IDNEST3 STAT5
(STAT4, .): STAT4 -> IDNEST2 . VAR3 VAR2 ASSIGNSTAT ;
(STAT4, [): STAT4 -> IDNEST2 . VAR3 VAR2 ASSIGNSTAT ;
(STAT5, .): STAT5 -> . VAR3 VAR2 ASSIGNSTAT ;
(STAT5, ;): STAT5 -> ;
(STAT6, .): STAT6 -> STAT2
(STAT6, ;): STAT6 -> STAT2
(STAT6, =): STAT6 -> ASSIGNSTAT ;
(STATBLOCK, ;): STATBLOCK -> eps
(STATBLOCK, do): STATBLOCK -> do STATBLOCK1 end
(STATBLOCK, else): STATBLOCK -> eps
(STATBLOCK, id): STATBLOCK -> STAT
(STATBLOCK, if): STATBLOCK -> STAT
(STATBLOCK, read): STATBLOCK -> STAT
(STATBLOCK, return): STATBLOCK -> STAT
(STATBLOCK, while): STATBLOCK -> STAT
(STATBLOCK, write): STATBLOCK -> STAT
(STATBLOCK1, end): STATBLOCK1 -> eps
(STATBLOCK1, id): STATBLOCK1 -> STAT STATBLOCK1
(STATBLOCK1, if): STATBLOCK1 -> STAT STATBLOCK1
(STATBLOCK1, read): STATBLOCK1 -> STAT STATBLOCK1
(STATBLOCK1, return): STATBLOCK1 -> STAT STATBLOCK1
(STATBLOCK1, while): STATBLOCK1 -> STAT STATBLOCK1
(STATBLOCK1, write): STATBLOCK1 -> STAT STATBLOCK1
(TERM, (): TERM -> FACTOR TERM1
(TERM, +): TERM -> FACTOR TERM1
(TERM, -): TERM -> FACTOR TERM1
(TERM, floatliteral): TERM -> FACTOR TERM1
(TERM, id): TERM -> FACTOR TERM1
(TERM, integerliteral): TERM -> FACTOR TERM1
(TERM, not): TERM -> FACTOR TERM1
(TERM1, )): TERM1 -> eps
(TERM1, *): TERM1 -> MULTOP FACTOR TERM1
(TERM1, +): TERM1 -> eps
(TERM1, ,): TERM1 -> eps
(TERM1, -): TERM1 -> eps
(TERM1, /): TERM1 -> MULTOP FACTOR TERM1
(TERM1, ;): TERM1 -> eps
(TERM1, <): TERM1 -> eps
(TERM1, <=): TERM1 -> eps
(TERM1, <>): TERM1 -> eps
(TERM1, ==): TERM1 -> eps
(TERM1, >): TERM1 -> eps
(TERM1, >=): TERM1 -> eps
(TERM1, ]): TERM1 -> eps
(TERM1, and): TERM1 -> MULTOP FACTOR TERM1
(TERM1, or): TERM1 -> eps
(TYPE, float): TYPE -> INTEGERORFLOAT
(TYPE, id): TYPE -> id
(TYPE, integer): TYPE -> INTEGERORFLOAT
(TYPEORVOID, float): TYPEORVOID -> TYPE
(TYPEORVOID, id): TYPEORVOID -> TYPE
(TYPEORVOID, integer): TYPEORVOID -> TYPE
(TYPEORVOID, void): TYPEORVOID -> void
(VAR, id): VAR -> id VAR5
(VAR1, (): VAR1 -> IDNEST1 VAR4
(VAR1, .): VAR1 -> IDNEST1 VAR4
(VAR1, [): VAR1 -> IDNEST1 VAR4
(VAR2, )): VAR2 -> eps
(VAR2, =): VAR2 -> eps
(VAR2, [): VAR2 -> INDEX VAR2
(VAR3, )): VAR3 -> eps
(VAR3, *): VAR3 -> eps
(VAR3, +): VAR3 -> eps
(VAR3, ,): VAR3 -> eps
(VAR3, -): VAR3 -> eps
(VAR3, /): VAR3 -> eps
(VAR3, ;): VAR3 -> eps
(VAR3, <): VAR3 -> eps
(VAR3, <=): VAR3 -> eps
(VAR3, <>): VAR3 -> eps
(VAR3, =): VAR3 -> eps
(VAR3, ==): VAR3 -> eps
(VAR3, >): VAR3 -> eps
(VAR3, >=): VAR3 -> eps
(VAR3, [): VAR3 -> eps
(VAR3, ]): VAR3 -> eps
(VAR3, and): VAR3 -> eps
(VAR3, id): VAR3 -> IDNEST VAR3
(VAR3, or): VAR3 -> eps
(VAR4, .): VAR4 -> . VAR3
(VAR5, (): VAR5 -> VAR1 VAR2
(VAR5, )): VAR5 -> eps
(VAR5, .): VAR5 -> VAR1 VAR2
(VAR5, [): VAR5 -> VAR1 VAR2
(VARDECL, float): VARDECL -> INTEGERORFLOAT VARDECL1
(VARDECL, id): VARDECL -> id VARDECL1
(VARDECL, integer): VARDECL -> INTEGERORFLOAT VARDECL1
(VARDECL1, id): VARDECL1 -> id VARDECL2 ;
(VARDECL2, ;): VARDECL2 -> eps
(VARDECL2, [): VARDECL2 -> ARRAYSIZE VARDECL2
(VARDECL2, private): VARDECL2 -> eps
(VARDECL2, public): VARDECL2 -> eps
(VARDECL2, }): VARDECL2 -> eps
(VISIBILITY, private): VISIBILITY -> private
(VISIBILITY, public): VISIBILITY -> public
